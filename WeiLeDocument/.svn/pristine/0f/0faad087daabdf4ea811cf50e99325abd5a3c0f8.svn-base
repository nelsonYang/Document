package com.yidhuo.weiledoc;

import com.framework.json.JsonUtils;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author Administrator
 */
@WebServlet(name = "DetailServlet", urlPatterns = {"/DetailServlet"})
public class DetailServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP
     * <code>GET</code> and
     * <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("application/json;charset=UTF-8");
        PrintWriter out = response.getWriter();
        try {
            String page = request.getParameter("page");
            String rows = request.getParameter("rows");
            String keyWords = request.getParameter("keyWords");
            List<Map<String, String>> resultMapList = new ArrayList<Map<String, String>>();
            if (keyWords != null && !keyWords.isEmpty()) {
                List<ServiceConfigBean> serviceConfigBeanList = new ArrayList<ServiceConfigBean>();
                Collection<ServiceConfigBean> serviceConfigCollection = new DataGridBean().getServiceConfigMap().values();
                for (ServiceConfigBean bean : serviceConfigCollection) {
                    if (bean.getAct().contains(keyWords) || bean.getDescription().contains(keyWords)) {
                        serviceConfigBeanList.add(bean);
                    }
                }
                Map<String, String> resultMap;
                for (ServiceConfigBean serviceConfigBean : serviceConfigBeanList) {
                    resultMap = new HashMap<String, String>(4, 1);
                    resultMap.put("actionName", serviceConfigBean.getAct());
                    resultMap.put("description", serviceConfigBean.getDescription());
                    resultMap.put("requestCrypt", serviceConfigBean.getRequestCrypt());
                    resultMap.put("responseCrypt", serviceConfigBean.getResponseCrypt());
                    resultMapList.add(resultMap);
                }
            } else {
                List<ServiceConfigBean> serviceConfigBeanList = new DataGridBean().getServiceConfigList();
                Map<String, String> resultMap;
                for (ServiceConfigBean serviceConfigBean : serviceConfigBeanList) {
                    resultMap = new HashMap<String, String>(4, 1);
                    resultMap.put("actionName", serviceConfigBean.getAct());
                    resultMap.put("description", serviceConfigBean.getDescription());
                    resultMap.put("requestCrypt", serviceConfigBean.getRequestCrypt());
                    resultMap.put("responseCrypt", serviceConfigBean.getResponseCrypt());
                    resultMapList.add(resultMap);
                }
            }
            String json = JsonUtils.mapListToJsonArray(resultMapList);
            StringBuilder jsonBuilder = new StringBuilder();
            jsonBuilder.append("{\"total\":").append("\"").append(resultMapList.size()).append("\",\"rows\":").append(json).append("}");
            out.print(jsonBuilder.toString());
            out.flush();
        } finally {
            out.close();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
